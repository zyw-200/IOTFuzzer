/*! \page fw_pipeline_page Running File Analysis and Post Processing Pipelines

\section fw_pipeline_overview Overview
This page outlines how to setup up file analysis and post processing pipelines so that data from a disk image can be analyzed. It requires that you have already populated the database as outlined in \ref fw_extract_page.  
This page also assumes that you have read \ref pipeline_config_page so that you are familiar with file analysis and post processing pipelines. 

\section fw_pipeline_create Creating a Pipeline
Before the first pipeline can be created, an instance of TskPipelineManager must be created to serve as a pipeline factory.  
Calling TskPipelineManager.createPipeline() will return a TskPipeline pointer addressing either a TskFileAnalysisPipeline or TskReportPipeline (i.e, post processing pipeline) object, depending on the pipeline type argument passed to TskPipelineManager.createPipeline(). 

\section fw_pipeline_run Running a Pipeline
Once you have a TskPipeline object, you can call one of the following member functions to run the pipeline:

- TskPipeline::run(const uint64_t fileId) or TskPipeline::run(TskFile* file) to analyze a file with a TskFileAnalysisPipeline object.
- TskPipeline::run() to do post processing with a TskReportPipeline object.

*/
